<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd">

    <security:http auto-config="true">
        <security:intercept-url pattern="/**" access="hasRole('ROLE_USER')"/>
    </security:http>

    <security:authentication-manager>
        <security:authentication-provider>
            <security:user-service>
                <security:user name="user" password="user" authorities="ROLE_USER"/>
                <security:user name="admin" password="admin" authorities="ROLE_USER, ROLE_ADMIN"/>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>

    <!--&lt;!&ndash;登录页面不过滤 &ndash;&gt;-->
    <!--<security:http pattern="/login.jsp" security="none" />-->
    <!--&lt;!&ndash;<security:http access-denied-page="/accessDenied.jsp">&ndash;&gt;-->
    <!--<security:http>-->
        <!--<security:form-login login-page="/login.jsp" />-->
        <!--&lt;!&ndash;访问/admin.jsp资源的用户必须具有ROLE_ADMIN的权限 &ndash;&gt;-->
        <!--&lt;!&ndash; <intercept-url pattern="/admin.jsp" access="ROLE_ADMIN" /> &ndash;&gt;-->
        <!--&lt;!&ndash;访问/**资源的用户必须具有ROLE_USER的权限 &ndash;&gt;-->
        <!--&lt;!&ndash; <intercept-url pattern="/**" access="ROLE_USER" /> &ndash;&gt;-->
        <!--<security:session-management>-->
            <!--<security:concurrency-control max-sessions="1"-->
                                 <!--error-if-maximum-exceeded="false" />-->
        <!--</security:session-management>-->
        <!--&lt;!&ndash;增加一个filter，这点与 Acegi是不一样的，不能修改默认的filter了， 这个filter位于FILTER_SECURITY_INTERCEPTOR之前 &ndash;&gt;-->
        <!--<security:custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />-->
    <!--</security:http>-->

    <!--&lt;!&ndash;验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 &ndash;&gt;-->
    <!--<security:authentication-manager alias="authenticationManager">-->
        <!--<security:authentication-provider user-service-ref="myUserDetailService">-->
            <!--&lt;!&ndash;如果用户的密码采用加密的话 <password-encoder hash="md5" /> &ndash;&gt;-->
        <!--</security:authentication-provider>-->
    <!--</security:authentication-manager>-->
    <!--&lt;!&ndash;一个自定义的filter，必须包含 authenticationManager,accessDecisionManager,securityMetadataSource三个属性，-->
        <!--我们的所有控制将在这三个类中实现，解释详见具体配置 &ndash;&gt;-->
    <!--<bean id="myFilter"-->
            <!--class="com.spring.xxx.support.filter.MyFilterSecurityInterceptor">-->
        <!--<property name="authenticationManager" ref="authenticationManager" />-->
        <!--<property name="accessDecisionManager" ref="myAccessDecisionManagerBean" />-->
        <!--<property name="securityMetadataSource" ref="securityMetadataSource" />-->
    <!--</bean>-->

    <!--&lt;!&ndash;在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 &ndash;&gt;-->
    <!--<bean id="myUserDetailService" class="com.spring.xxx.service.MyUserDetailService" />-->
    <!--&lt;!&ndash;访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 &ndash;&gt;-->
    <!--<bean id="myAccessDecisionManagerBean"-->
          <!--class="com.spring.xxx.support.MyAccessDecisionManager">-->
    <!--</bean>-->
    <!--&lt;!&ndash;资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 &ndash;&gt;-->
    <!--<bean id="securityMetadataSource" class="com.spring.xxx.support.dataSource.MyInvocationSecurityMetadataSource" />-->


</beans>